pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- Pico Shooting Range
-- by gabrielsson
left,right,up,down,fire1,fire2=0,1,2,3,4,5
black,dark_blue,dark_purple,dark_green,brown,dark_gray,light_gray,white,red,orange,yellow,green,blue,indigo,pink,peach=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15


game = {}
level = 1
_target = {

}

TARGET_RADIUS = 14

function _init() 
    game_init()

end

function _draw()
    game.draw()
end

function _update()
    game.update()
end

function game_init() 
    game = {}
    game.start = time()

    game.rows = createRows(6)
   
    game.numberOfTargets = level*10
    game.update = game_update
    
    game.draw = game_draw

    game.crosshair = {
        x = 64,
        y = 64,
        move = function(self) 
            self.x += (rnd(3*10)/10-1.5)
            self.y += (rnd(3*10)/10-1.5)
            if self.x < 0 then self.x = 0 end
            if self.y < 0 then self.y = 0 end
            if self.x > 127 then self.x = 127 end
            if self.y > 127 then self.y = 127 end
        end,
        recoil = function(self)
            local y = self.y
            self:move()
            self.y -= 10*abs(y - self.y)
        end
    }

    game.crosshair:move()
    game.shoot = shoot
end

function copy(o)
    local c
    if type(o) == 'table' then
      c = {}
      for k, v in pairs(o) do
        c[k] = copy(v)
      end
    else
      c = o
    end
    return c
  end

function createRows(n)
    rows = {}
    
    
    for i = 1, n do
        direction = 1
        
        if (i % 2 == 0) then direction = -1 end
        
        offsetX = 9 * (n-i)
        offsetY = 6
        lineLength = 127-offsetX*2
        add(rows, {
            y = offsetY*radiusConstant(lineLength)*(i) + 60,
            x = offsetX,
            length = lineLength,
            speed = lineLength/127 * 2.9,
            direction = direction,
            targets = {},
            addTarget = function(self, o) 
                -- printh('added target to '.. tostring(self))
                if(self.direction > 0) then
                    o.x = self.x
                else
                    o.x = self.x+self.length
                end

                add(self.targets, o)
            end,
            move = function(self)
                shouldPopOne = {}
                for target in all(self.targets) do
                    target.x += self.speed*self.direction

                    if target.x > self.x+self.length or target.x < self.x then 
                        shouldPopOne = target
                    end
                    
                end 
                return shouldPopOne 
            end,
            draw = function(self)
                rc = radiusConstant(self.length)

                for target in all(self.targets) do
                    if not target.isHit then 
                        --zspr(17,4,4,target.x-2*TARGET_RADIUS*rc ,self.y-1*TARGET_RADIUS*rc - rc, rc, false)
                        --function rspr(n,w,h,dx,dy,dw,dh)
                        -- rspr(17,4,4,target.x - 2 * TARGET_RADIUS*rc ,self.y-3.4*TARGET_RADIUS*rc, TARGET_RADIUS*4*rc, TARGET_RADIUS*4*rc)

                        circfill(target.x,self.y,TARGET_RADIUS*rc,red)
                        circ(target.x,self.y,TARGET_RADIUS*rc,black)
                
                        circfill(target.x,self.y,TARGET_RADIUS*2/3*rc,white)
                        circfill(target.x,self.y,TARGET_RADIUS*1/3*rc,red)


                    end
                end

                s = 0
                for i=self.x,self.x + self.length, self.length/127*8 do
                    
                    zspr(s%4+2,1,1,i,self.y, 2*rc, false)

                    s += 1
                end
            end,
            canAdd = function(self) 
                rc = radiusConstant(self.length)
                if #self.targets == 0 then return true end
                last = self.targets[#self.targets]
                printh("rc "..rc)
                if self.direction > 0 then
                    return last.x > self.x + 60*rc
                else
                    return last.x < self.length
                end
            end
        })
    end
    --printh('returning rows '..#rows)
    return rows
end
function radiusConstant(rowLength)
    return rowLength/127

end 
function game_draw()
    cls(1)
    for row in all(game.rows) do
        row:draw()
    end
    
    levelTime =   (time()- game.start)
    
    map(0, 0, 0, 0, 16, 16)

    print("time left "..targetsLeft()..' numberOfTargets '..game.numberOfTargets, 0, 0, white)
    spr(1, game.crosshair.x -4, game.crosshair.y-4)
    
    print("press ❎ to shoot", 32, 115, white)
end

function game_update() 
        if btn(0) then game.crosshair.x -= 1 end
        if btn(1) then game.crosshair.x += 1 end
        if btn(2) then game.crosshair.y -= 1 end
        if btn(3) then game.crosshair.y += 1 end
        if btnp(5) and targetsLeft() > 0  then
            game.shoot()
            sfx(0)
            game.crosshair:recoil(8)
        end
        j = 1
        for row in all(game.rows) do
            outOfBoundTarget = row:move()
            if(next(outOfBoundTarget) != nil) then 
                del(row.targets, outOfBoundTarget)
                if (j == #game.rows) then 
                    game.rows[1]:addTarget(outOfBoundTarget)
                else
                    game.rows[j+1]:addTarget(outOfBoundTarget)
                end
            end
            j += 1
        end
        
        game.crosshair:move(1)

        -- add number of targets
        if(game.numberOfTargets > 0) then 
            if(game.rows[1]:canAdd()) then 
                game.rows[1]:addTarget(copy(_target))
                game.numberOfTargets -= 1
            end
        end
        --printh('targetsLeft '..targetsLeft()..' noT '..game.numberOfTargets)
        
        if(targetsLeft() < 1 and game.numberOfTargets <= 0) then 
            
                game.update = end_game
                game.draw = end_draw
                game.time = time() -1 
        end
end

function end_game()
    if btnp(5) then 
        if gameOver then
            level = 1
            gameOver = false
        else 
            level +=1
        end
        game_init() 
    end
end

function end_draw()
    cls()
    i = 0.5
    total = game.time - game.start
    col = white
    if( total > level*15) then 
        print("total time "..(game.time-game.start), 22,64,col)
        print("❎ game over at level "..level, 12, 115, col)
    else
        print("total time "..(game.time-game.start), 22,64,col)
        print("❎ next level "..level +1, 27, 115, col)
    end
end
function distance ( x1, y1, x2, y2 )
    local dx = x1 - x2
    local dy = y1 - y2
    d = sqrt( dx * dx + dy * dy )
    --printh('distance '..d)
    return d
end

function shoot() 
    game.lastShot = time()
    for i = #game.rows, 1, -1 do
        for target in all(game.rows[i].targets) do
            rc = radiusConstant(game.rows[i].length)
            if distance(game.crosshair.x,game.crosshair.y,target.x,game.rows[i].y) < TARGET_RADIUS*rc then
                del(game.rows[i].targets, target)
                return
            end
            
        end
    end
end

function targetsLeft() 
    local left = 0
    for row in all(game.rows) do 
        for target in all(row.targets) do
            if not target.isHit then left += 1 end
        end
    end
    return left
end

function zspr(n,w,h,dx,dy,dz)
    sx = 8 * (n % 16)
    sy = 8 * flr(n / 16)
    sw = 8 * w
    sh = 8 * h
    dw = sw * dz
    dh = sh * dz
  
    sspr(sx,sy,sw,sh, dx,dy,dw,dh)
end

function rspr(n,w,h,dx,dy,dw,dh)
    sx = 8 * (n % 16)
    sy = 8 * flr(n / 16)
    sw = 8 * w
    sh = 8 * h
    --dw = sw * dz
    --dh = sh * dz
  
    sspr(sx,sy,sw,sh, dx,dy,dw,dh)
end
-- converts anything to string, even nested tables
function tostring(any)
    if (type(any)~="table") return tostr(any)
    local str = "{"
    for k,v in pairs(any) do
      if (str~="{") str=str..","
      str=str..tostring(k).."="..tostring(v)
    end
    return str.."}"
  end
__gfx__
00000000002222000000000000000000000000000000000000000000444054444440544430b0000000000003bb333bb333033b0b33033b0b33b03bbb00000000
0000000000022000000000000000000000000000000000000000000044405444444405443bb0000000000003b30b33b3b33b3333b33b3333b03b0bb000000000
0000000020000002000000007700000000000000770000000000000044405444444405443330000000300333b3333b0b0b3333bb0b3333bbb33bbb3300000000
000000002200002200000077ccc0000000000077ccc00000000000004440544444440544b30bb000030b33bb03033b333330b0000030b033bb0b3bb000000000
000000002200002200007ccccc70000000007ccccc700000000000004440544444440544bb0b30000b0b3bb03bbb3030b33bb000003bb0300bbb03bb00000000
0000000020000002007cccc007000000007cccc007000000000000004440544444440544b33b3b00b33b3bbb3b0b33bb330b0000000b0bb33b0bb30000000000
0000000000022000cccccccc0000007ccccccccc0000007c00000000444054444444054433330bb003330bb033b33003b0b00000000000b0b3333b0300000000
0000000000222200cccccccccccccccccccccccccccccccc00000000444405444444054433b3330b33b3330b33330333bbb00000000000bbb3bbb3bb00000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000099999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000009999999999000000000000000000000000000000bb000000bb000000bb000b00eb0000000000000000000000000000000000000000000
0000000000000000009999999999990000000000000000000000000000be0b3000bb0b3000beb0ebb33bbb300000000000000000000000000000000000000000
00000000000000000999999999999990000000000000000000000000b0bbe0e30ebbebe3b0bb0bb0b0bbebe30000000000000000000000000000000000000000
000000000000000099999999999999990000000000000000000000003b0bbb3033ebb0bb3bbbbb3b330bbbbb0000000000000000000000000000000000000000
00000000000000009999999999999999000000000000000000000000bbb333333330bb3bbbb33333333bbb3b0000000000000000000000000000000000000000
00000000000000099999999999999999900000000000000000000000b33333333333b333b33333333333b3330000000000000000000000000000000000000000
00000000000000099999199999919999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099991119999111999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099991179999117999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999199999919999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999998888999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999998888999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999999889999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000099999999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000099999aaaaaa99999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000449999aaaaaaaa9999440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000004449999aaaaaaaa9994444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044444999aaaaaaaa9994444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044444999aaaaaaaa9999444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044449999aaaaaaaa9999444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044449999aaaaaaaa9999444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044499999aaaaaaaa9999944400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000044099999aaaaaaaa9999904400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000009999aaaaaaaa9999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000099999aaaaaa99999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000999999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000099999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000009999999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
00020e030b090a0b0e05030e090b0c0d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0e0b0a0d0c00000d0c000d0c0b0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0b0e0e0c0c000000000000000d000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e0b0c0d0000000000000000000d090e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e0e0900000000000000000000000d0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e0b0c0000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0c000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e00000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c090000000000000000000000000d0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0b000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e0c0000000000000000000000000a0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0900000000000000000000000a0b0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0a09000000000000000000000d0c0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080d0c0000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0700000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100003565033600306002d6502c6602660024600216401f600182301b6001a60019600176001465013650116400e6400d6300a600086000760004600016300000000000000000000000000000000000000000
